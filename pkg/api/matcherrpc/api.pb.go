// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package dcrticketmatcher is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	TxOut
	OutPoint
	WatchWaitingListRequest
	WatchWaitingListResponse
	FindMatchesRequest
	FindMatchesResponse
	GenerateTicketRequest
	GenerateTicketResponse
	FundTicketRequest
	FundTicketResponse
	FundSplitTxRequest
	FundSplitTxResponse
	StatusRequest
	StatusResponse
*/
package dcrticketmatcher

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TxOut struct {
	Value  uint64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Script []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
}

func (m *TxOut) Reset()                    { *m = TxOut{} }
func (m *TxOut) String() string            { return proto.CompactTextString(m) }
func (*TxOut) ProtoMessage()               {}
func (*TxOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TxOut) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TxOut) GetScript() []byte {
	if m != nil {
		return m.Script
	}
	return nil
}

type OutPoint struct {
	PrevHash  []byte `protobuf:"bytes,1,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	PrevIndex int32  `protobuf:"varint,2,opt,name=prev_index,json=prevIndex" json:"prev_index,omitempty"`
	Tree      int32  `protobuf:"varint,3,opt,name=tree" json:"tree,omitempty"`
}

func (m *OutPoint) Reset()                    { *m = OutPoint{} }
func (m *OutPoint) String() string            { return proto.CompactTextString(m) }
func (*OutPoint) ProtoMessage()               {}
func (*OutPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OutPoint) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *OutPoint) GetPrevIndex() int32 {
	if m != nil {
		return m.PrevIndex
	}
	return 0
}

func (m *OutPoint) GetTree() int32 {
	if m != nil {
		return m.Tree
	}
	return 0
}

type WatchWaitingListRequest struct {
}

func (m *WatchWaitingListRequest) Reset()                    { *m = WatchWaitingListRequest{} }
func (m *WatchWaitingListRequest) String() string            { return proto.CompactTextString(m) }
func (*WatchWaitingListRequest) ProtoMessage()               {}
func (*WatchWaitingListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type WatchWaitingListResponse struct {
	Queues []*WatchWaitingListResponse_Queue `protobuf:"bytes,1,rep,name=queues" json:"queues,omitempty"`
}

func (m *WatchWaitingListResponse) Reset()                    { *m = WatchWaitingListResponse{} }
func (m *WatchWaitingListResponse) String() string            { return proto.CompactTextString(m) }
func (*WatchWaitingListResponse) ProtoMessage()               {}
func (*WatchWaitingListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WatchWaitingListResponse) GetQueues() []*WatchWaitingListResponse_Queue {
	if m != nil {
		return m.Queues
	}
	return nil
}

type WatchWaitingListResponse_Queue struct {
	Name    string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Amounts []uint64 `protobuf:"varint,2,rep,packed,name=amounts" json:"amounts,omitempty"`
}

func (m *WatchWaitingListResponse_Queue) Reset()         { *m = WatchWaitingListResponse_Queue{} }
func (m *WatchWaitingListResponse_Queue) String() string { return proto.CompactTextString(m) }
func (*WatchWaitingListResponse_Queue) ProtoMessage()    {}
func (*WatchWaitingListResponse_Queue) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

func (m *WatchWaitingListResponse_Queue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WatchWaitingListResponse_Queue) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

type FindMatchesRequest struct {
	ProtocolVersion uint32 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	Amount          uint64 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	SessionName     string `protobuf:"bytes,3,opt,name=session_name,json=sessionName" json:"session_name,omitempty"`
}

func (m *FindMatchesRequest) Reset()                    { *m = FindMatchesRequest{} }
func (m *FindMatchesRequest) String() string            { return proto.CompactTextString(m) }
func (*FindMatchesRequest) ProtoMessage()               {}
func (*FindMatchesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FindMatchesRequest) GetProtocolVersion() uint32 {
	if m != nil {
		return m.ProtocolVersion
	}
	return 0
}

func (m *FindMatchesRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *FindMatchesRequest) GetSessionName() string {
	if m != nil {
		return m.SessionName
	}
	return ""
}

type FindMatchesResponse struct {
	SessionId     uint32 `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Amount        uint64 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Fee           uint64 `protobuf:"varint,3,opt,name=fee" json:"fee,omitempty"`
	PoolFee       uint64 `protobuf:"varint,4,opt,name=pool_fee,json=poolFee" json:"pool_fee,omitempty"`
	MainchainHash []byte `protobuf:"bytes,5,opt,name=mainchain_hash,json=mainchainHash,proto3" json:"mainchain_hash,omitempty"`
	TicketPrice   uint64 `protobuf:"varint,6,opt,name=ticket_price,json=ticketPrice" json:"ticket_price,omitempty"`
}

func (m *FindMatchesResponse) Reset()                    { *m = FindMatchesResponse{} }
func (m *FindMatchesResponse) String() string            { return proto.CompactTextString(m) }
func (*FindMatchesResponse) ProtoMessage()               {}
func (*FindMatchesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FindMatchesResponse) GetSessionId() uint32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *FindMatchesResponse) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *FindMatchesResponse) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *FindMatchesResponse) GetPoolFee() uint64 {
	if m != nil {
		return m.PoolFee
	}
	return 0
}

func (m *FindMatchesResponse) GetMainchainHash() []byte {
	if m != nil {
		return m.MainchainHash
	}
	return nil
}

func (m *FindMatchesResponse) GetTicketPrice() uint64 {
	if m != nil {
		return m.TicketPrice
	}
	return 0
}

type GenerateTicketRequest struct {
	SessionId         uint32      `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	VoteAddress       string      `protobuf:"bytes,2,opt,name=vote_address,json=voteAddress" json:"vote_address,omitempty"`
	PoolAddress       string      `protobuf:"bytes,3,opt,name=pool_address,json=poolAddress" json:"pool_address,omitempty"`
	CommitmentAddress string      `protobuf:"bytes,4,opt,name=commitment_address,json=commitmentAddress" json:"commitment_address,omitempty"`
	SplitTxAddress    string      `protobuf:"bytes,5,opt,name=split_tx_address,json=splitTxAddress" json:"split_tx_address,omitempty"`
	SplitTxChange     *TxOut      `protobuf:"bytes,6,opt,name=split_tx_change,json=splitTxChange" json:"split_tx_change,omitempty"`
	SplitTxInputs     []*OutPoint `protobuf:"bytes,7,rep,name=split_tx_inputs,json=splitTxInputs" json:"split_tx_inputs,omitempty"`
	SecretnbHash      []byte      `protobuf:"bytes,8,opt,name=secretnb_hash,json=secretnbHash,proto3" json:"secretnb_hash,omitempty"`
}

func (m *GenerateTicketRequest) Reset()                    { *m = GenerateTicketRequest{} }
func (m *GenerateTicketRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateTicketRequest) ProtoMessage()               {}
func (*GenerateTicketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GenerateTicketRequest) GetSessionId() uint32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *GenerateTicketRequest) GetVoteAddress() string {
	if m != nil {
		return m.VoteAddress
	}
	return ""
}

func (m *GenerateTicketRequest) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *GenerateTicketRequest) GetCommitmentAddress() string {
	if m != nil {
		return m.CommitmentAddress
	}
	return ""
}

func (m *GenerateTicketRequest) GetSplitTxAddress() string {
	if m != nil {
		return m.SplitTxAddress
	}
	return ""
}

func (m *GenerateTicketRequest) GetSplitTxChange() *TxOut {
	if m != nil {
		return m.SplitTxChange
	}
	return nil
}

func (m *GenerateTicketRequest) GetSplitTxInputs() []*OutPoint {
	if m != nil {
		return m.SplitTxInputs
	}
	return nil
}

func (m *GenerateTicketRequest) GetSecretnbHash() []byte {
	if m != nil {
		return m.SecretnbHash
	}
	return nil
}

type GenerateTicketResponse struct {
	SplitTx        []byte                                `protobuf:"bytes,1,opt,name=split_tx,json=splitTx,proto3" json:"split_tx,omitempty"`
	TicketTemplate []byte                                `protobuf:"bytes,2,opt,name=ticket_template,json=ticketTemplate,proto3" json:"ticket_template,omitempty"`
	Participants   []*GenerateTicketResponse_Participant `protobuf:"bytes,3,rep,name=participants" json:"participants,omitempty"`
	Index          uint32                                `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
}

func (m *GenerateTicketResponse) Reset()                    { *m = GenerateTicketResponse{} }
func (m *GenerateTicketResponse) String() string            { return proto.CompactTextString(m) }
func (*GenerateTicketResponse) ProtoMessage()               {}
func (*GenerateTicketResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GenerateTicketResponse) GetSplitTx() []byte {
	if m != nil {
		return m.SplitTx
	}
	return nil
}

func (m *GenerateTicketResponse) GetTicketTemplate() []byte {
	if m != nil {
		return m.TicketTemplate
	}
	return nil
}

func (m *GenerateTicketResponse) GetParticipants() []*GenerateTicketResponse_Participant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *GenerateTicketResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type GenerateTicketResponse_Participant struct {
	Amount       uint64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	SecretnbHash []byte `protobuf:"bytes,2,opt,name=secretnb_hash,json=secretnbHash,proto3" json:"secretnb_hash,omitempty"`
	VotePkScript []byte `protobuf:"bytes,3,opt,name=vote_pk_script,json=votePkScript,proto3" json:"vote_pk_script,omitempty"`
	PoolPkScript []byte `protobuf:"bytes,4,opt,name=pool_pk_script,json=poolPkScript,proto3" json:"pool_pk_script,omitempty"`
}

func (m *GenerateTicketResponse_Participant) Reset()         { *m = GenerateTicketResponse_Participant{} }
func (m *GenerateTicketResponse_Participant) String() string { return proto.CompactTextString(m) }
func (*GenerateTicketResponse_Participant) ProtoMessage()    {}
func (*GenerateTicketResponse_Participant) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0}
}

func (m *GenerateTicketResponse_Participant) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *GenerateTicketResponse_Participant) GetSecretnbHash() []byte {
	if m != nil {
		return m.SecretnbHash
	}
	return nil
}

func (m *GenerateTicketResponse_Participant) GetVotePkScript() []byte {
	if m != nil {
		return m.VotePkScript
	}
	return nil
}

func (m *GenerateTicketResponse_Participant) GetPoolPkScript() []byte {
	if m != nil {
		return m.PoolPkScript
	}
	return nil
}

type FundTicketRequest struct {
	SessionId           uint32                                       `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Tickets             []*FundTicketRequest_FundedParticipantTicket `protobuf:"bytes,2,rep,name=tickets" json:"tickets,omitempty"`
	RevocationScriptSig []byte                                       `protobuf:"bytes,3,opt,name=revocation_script_sig,json=revocationScriptSig,proto3" json:"revocation_script_sig,omitempty"`
}

func (m *FundTicketRequest) Reset()                    { *m = FundTicketRequest{} }
func (m *FundTicketRequest) String() string            { return proto.CompactTextString(m) }
func (*FundTicketRequest) ProtoMessage()               {}
func (*FundTicketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FundTicketRequest) GetSessionId() uint32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *FundTicketRequest) GetTickets() []*FundTicketRequest_FundedParticipantTicket {
	if m != nil {
		return m.Tickets
	}
	return nil
}

func (m *FundTicketRequest) GetRevocationScriptSig() []byte {
	if m != nil {
		return m.RevocationScriptSig
	}
	return nil
}

type FundTicketRequest_FundedParticipantTicket struct {
	TicketInputScriptsig []byte `protobuf:"bytes,1,opt,name=ticket_input_scriptsig,json=ticketInputScriptsig,proto3" json:"ticket_input_scriptsig,omitempty"`
}

func (m *FundTicketRequest_FundedParticipantTicket) Reset() {
	*m = FundTicketRequest_FundedParticipantTicket{}
}
func (m *FundTicketRequest_FundedParticipantTicket) String() string { return proto.CompactTextString(m) }
func (*FundTicketRequest_FundedParticipantTicket) ProtoMessage()    {}
func (*FundTicketRequest_FundedParticipantTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8, 0}
}

func (m *FundTicketRequest_FundedParticipantTicket) GetTicketInputScriptsig() []byte {
	if m != nil {
		return m.TicketInputScriptsig
	}
	return nil
}

type FundTicketResponse struct {
	Tickets []*FundTicketResponse_FundedParticipantTicket `protobuf:"bytes,1,rep,name=tickets" json:"tickets,omitempty"`
}

func (m *FundTicketResponse) Reset()                    { *m = FundTicketResponse{} }
func (m *FundTicketResponse) String() string            { return proto.CompactTextString(m) }
func (*FundTicketResponse) ProtoMessage()               {}
func (*FundTicketResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FundTicketResponse) GetTickets() []*FundTicketResponse_FundedParticipantTicket {
	if m != nil {
		return m.Tickets
	}
	return nil
}

type FundTicketResponse_FundedParticipantTicket struct {
	Ticket     []byte `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Revocation []byte `protobuf:"bytes,2,opt,name=revocation,proto3" json:"revocation,omitempty"`
}

func (m *FundTicketResponse_FundedParticipantTicket) Reset() {
	*m = FundTicketResponse_FundedParticipantTicket{}
}
func (m *FundTicketResponse_FundedParticipantTicket) String() string {
	return proto.CompactTextString(m)
}
func (*FundTicketResponse_FundedParticipantTicket) ProtoMessage() {}
func (*FundTicketResponse_FundedParticipantTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9, 0}
}

func (m *FundTicketResponse_FundedParticipantTicket) GetTicket() []byte {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *FundTicketResponse_FundedParticipantTicket) GetRevocation() []byte {
	if m != nil {
		return m.Revocation
	}
	return nil
}

type FundSplitTxRequest struct {
	SessionId         uint32   `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	SplitTxScriptsigs [][]byte `protobuf:"bytes,2,rep,name=split_tx_scriptsigs,json=splitTxScriptsigs,proto3" json:"split_tx_scriptsigs,omitempty"`
	Secretnb          uint64   `protobuf:"varint,3,opt,name=secretnb" json:"secretnb,omitempty"`
}

func (m *FundSplitTxRequest) Reset()                    { *m = FundSplitTxRequest{} }
func (m *FundSplitTxRequest) String() string            { return proto.CompactTextString(m) }
func (*FundSplitTxRequest) ProtoMessage()               {}
func (*FundSplitTxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FundSplitTxRequest) GetSessionId() uint32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *FundSplitTxRequest) GetSplitTxScriptsigs() [][]byte {
	if m != nil {
		return m.SplitTxScriptsigs
	}
	return nil
}

func (m *FundSplitTxRequest) GetSecretnb() uint64 {
	if m != nil {
		return m.Secretnb
	}
	return 0
}

type FundSplitTxResponse struct {
	SplitTx       []byte   `protobuf:"bytes,1,opt,name=split_tx,json=splitTx,proto3" json:"split_tx,omitempty"`
	SecretNumbers []uint64 `protobuf:"varint,2,rep,packed,name=secret_numbers,json=secretNumbers" json:"secret_numbers,omitempty"`
}

func (m *FundSplitTxResponse) Reset()                    { *m = FundSplitTxResponse{} }
func (m *FundSplitTxResponse) String() string            { return proto.CompactTextString(m) }
func (*FundSplitTxResponse) ProtoMessage()               {}
func (*FundSplitTxResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FundSplitTxResponse) GetSplitTx() []byte {
	if m != nil {
		return m.SplitTx
	}
	return nil
}

func (m *FundSplitTxResponse) GetSecretNumbers() []uint64 {
	if m != nil {
		return m.SecretNumbers
	}
	return nil
}

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type StatusResponse struct {
	TicketPrice     uint64 `protobuf:"varint,1,opt,name=ticket_price,json=ticketPrice" json:"ticket_price,omitempty"`
	ProtocolVersion uint32 `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *StatusResponse) GetTicketPrice() uint64 {
	if m != nil {
		return m.TicketPrice
	}
	return 0
}

func (m *StatusResponse) GetProtocolVersion() uint32 {
	if m != nil {
		return m.ProtocolVersion
	}
	return 0
}

func init() {
	proto.RegisterType((*TxOut)(nil), "dcrticketmatcher.TxOut")
	proto.RegisterType((*OutPoint)(nil), "dcrticketmatcher.OutPoint")
	proto.RegisterType((*WatchWaitingListRequest)(nil), "dcrticketmatcher.WatchWaitingListRequest")
	proto.RegisterType((*WatchWaitingListResponse)(nil), "dcrticketmatcher.WatchWaitingListResponse")
	proto.RegisterType((*WatchWaitingListResponse_Queue)(nil), "dcrticketmatcher.WatchWaitingListResponse.Queue")
	proto.RegisterType((*FindMatchesRequest)(nil), "dcrticketmatcher.FindMatchesRequest")
	proto.RegisterType((*FindMatchesResponse)(nil), "dcrticketmatcher.FindMatchesResponse")
	proto.RegisterType((*GenerateTicketRequest)(nil), "dcrticketmatcher.GenerateTicketRequest")
	proto.RegisterType((*GenerateTicketResponse)(nil), "dcrticketmatcher.GenerateTicketResponse")
	proto.RegisterType((*GenerateTicketResponse_Participant)(nil), "dcrticketmatcher.GenerateTicketResponse.Participant")
	proto.RegisterType((*FundTicketRequest)(nil), "dcrticketmatcher.FundTicketRequest")
	proto.RegisterType((*FundTicketRequest_FundedParticipantTicket)(nil), "dcrticketmatcher.FundTicketRequest.FundedParticipantTicket")
	proto.RegisterType((*FundTicketResponse)(nil), "dcrticketmatcher.FundTicketResponse")
	proto.RegisterType((*FundTicketResponse_FundedParticipantTicket)(nil), "dcrticketmatcher.FundTicketResponse.FundedParticipantTicket")
	proto.RegisterType((*FundSplitTxRequest)(nil), "dcrticketmatcher.FundSplitTxRequest")
	proto.RegisterType((*FundSplitTxResponse)(nil), "dcrticketmatcher.FundSplitTxResponse")
	proto.RegisterType((*StatusRequest)(nil), "dcrticketmatcher.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "dcrticketmatcher.StatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SplitTicketMatcherService service

type SplitTicketMatcherServiceClient interface {
	WatchWaitingList(ctx context.Context, in *WatchWaitingListRequest, opts ...grpc.CallOption) (SplitTicketMatcherService_WatchWaitingListClient, error)
	FindMatches(ctx context.Context, in *FindMatchesRequest, opts ...grpc.CallOption) (*FindMatchesResponse, error)
	GenerateTicket(ctx context.Context, in *GenerateTicketRequest, opts ...grpc.CallOption) (*GenerateTicketResponse, error)
	FundTicket(ctx context.Context, in *FundTicketRequest, opts ...grpc.CallOption) (*FundTicketResponse, error)
	FundSplitTx(ctx context.Context, in *FundSplitTxRequest, opts ...grpc.CallOption) (*FundSplitTxResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type splitTicketMatcherServiceClient struct {
	cc *grpc.ClientConn
}

func NewSplitTicketMatcherServiceClient(cc *grpc.ClientConn) SplitTicketMatcherServiceClient {
	return &splitTicketMatcherServiceClient{cc}
}

func (c *splitTicketMatcherServiceClient) WatchWaitingList(ctx context.Context, in *WatchWaitingListRequest, opts ...grpc.CallOption) (SplitTicketMatcherService_WatchWaitingListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SplitTicketMatcherService_serviceDesc.Streams[0], c.cc, "/dcrticketmatcher.SplitTicketMatcherService/WatchWaitingList", opts...)
	if err != nil {
		return nil, err
	}
	x := &splitTicketMatcherServiceWatchWaitingListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SplitTicketMatcherService_WatchWaitingListClient interface {
	Recv() (*WatchWaitingListResponse, error)
	grpc.ClientStream
}

type splitTicketMatcherServiceWatchWaitingListClient struct {
	grpc.ClientStream
}

func (x *splitTicketMatcherServiceWatchWaitingListClient) Recv() (*WatchWaitingListResponse, error) {
	m := new(WatchWaitingListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *splitTicketMatcherServiceClient) FindMatches(ctx context.Context, in *FindMatchesRequest, opts ...grpc.CallOption) (*FindMatchesResponse, error) {
	out := new(FindMatchesResponse)
	err := grpc.Invoke(ctx, "/dcrticketmatcher.SplitTicketMatcherService/FindMatches", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitTicketMatcherServiceClient) GenerateTicket(ctx context.Context, in *GenerateTicketRequest, opts ...grpc.CallOption) (*GenerateTicketResponse, error) {
	out := new(GenerateTicketResponse)
	err := grpc.Invoke(ctx, "/dcrticketmatcher.SplitTicketMatcherService/GenerateTicket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitTicketMatcherServiceClient) FundTicket(ctx context.Context, in *FundTicketRequest, opts ...grpc.CallOption) (*FundTicketResponse, error) {
	out := new(FundTicketResponse)
	err := grpc.Invoke(ctx, "/dcrticketmatcher.SplitTicketMatcherService/FundTicket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitTicketMatcherServiceClient) FundSplitTx(ctx context.Context, in *FundSplitTxRequest, opts ...grpc.CallOption) (*FundSplitTxResponse, error) {
	out := new(FundSplitTxResponse)
	err := grpc.Invoke(ctx, "/dcrticketmatcher.SplitTicketMatcherService/FundSplitTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitTicketMatcherServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/dcrticketmatcher.SplitTicketMatcherService/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SplitTicketMatcherService service

type SplitTicketMatcherServiceServer interface {
	WatchWaitingList(*WatchWaitingListRequest, SplitTicketMatcherService_WatchWaitingListServer) error
	FindMatches(context.Context, *FindMatchesRequest) (*FindMatchesResponse, error)
	GenerateTicket(context.Context, *GenerateTicketRequest) (*GenerateTicketResponse, error)
	FundTicket(context.Context, *FundTicketRequest) (*FundTicketResponse, error)
	FundSplitTx(context.Context, *FundSplitTxRequest) (*FundSplitTxResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterSplitTicketMatcherServiceServer(s *grpc.Server, srv SplitTicketMatcherServiceServer) {
	s.RegisterService(&_SplitTicketMatcherService_serviceDesc, srv)
}

func _SplitTicketMatcherService_WatchWaitingList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchWaitingListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SplitTicketMatcherServiceServer).WatchWaitingList(m, &splitTicketMatcherServiceWatchWaitingListServer{stream})
}

type SplitTicketMatcherService_WatchWaitingListServer interface {
	Send(*WatchWaitingListResponse) error
	grpc.ServerStream
}

type splitTicketMatcherServiceWatchWaitingListServer struct {
	grpc.ServerStream
}

func (x *splitTicketMatcherServiceWatchWaitingListServer) Send(m *WatchWaitingListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SplitTicketMatcherService_FindMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTicketMatcherServiceServer).FindMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcrticketmatcher.SplitTicketMatcherService/FindMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTicketMatcherServiceServer).FindMatches(ctx, req.(*FindMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SplitTicketMatcherService_GenerateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTicketMatcherServiceServer).GenerateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcrticketmatcher.SplitTicketMatcherService/GenerateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTicketMatcherServiceServer).GenerateTicket(ctx, req.(*GenerateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SplitTicketMatcherService_FundTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTicketMatcherServiceServer).FundTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcrticketmatcher.SplitTicketMatcherService/FundTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTicketMatcherServiceServer).FundTicket(ctx, req.(*FundTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SplitTicketMatcherService_FundSplitTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundSplitTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTicketMatcherServiceServer).FundSplitTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcrticketmatcher.SplitTicketMatcherService/FundSplitTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTicketMatcherServiceServer).FundSplitTx(ctx, req.(*FundSplitTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SplitTicketMatcherService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTicketMatcherServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcrticketmatcher.SplitTicketMatcherService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTicketMatcherServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SplitTicketMatcherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dcrticketmatcher.SplitTicketMatcherService",
	HandlerType: (*SplitTicketMatcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMatches",
			Handler:    _SplitTicketMatcherService_FindMatches_Handler,
		},
		{
			MethodName: "GenerateTicket",
			Handler:    _SplitTicketMatcherService_GenerateTicket_Handler,
		},
		{
			MethodName: "FundTicket",
			Handler:    _SplitTicketMatcherService_FundTicket_Handler,
		},
		{
			MethodName: "FundSplitTx",
			Handler:    _SplitTicketMatcherService_FundSplitTx_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _SplitTicketMatcherService_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchWaitingList",
			Handler:       _SplitTicketMatcherService_WatchWaitingList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1036 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xd6, 0xd8, 0xe3, 0xbf, 0xf2, 0x4f, 0x9c, 0xce, 0x6e, 0xe2, 0x0c, 0x5a, 0x70, 0x66, 0x13,
	0xad, 0x17, 0x09, 0x6b, 0x65, 0x76, 0x4f, 0x20, 0x21, 0x40, 0x0a, 0x1b, 0x01, 0x9b, 0xec, 0x38,
	0x6c, 0xd0, 0x1e, 0x18, 0x4d, 0xc6, 0x4d, 0xdc, 0x8a, 0xe7, 0x67, 0xa7, 0x7b, 0xac, 0x88, 0x0b,
	0x6f, 0xc0, 0x91, 0x0b, 0x0f, 0xc3, 0x81, 0x23, 0xcf, 0xc1, 0x73, 0x80, 0xba, 0xba, 0xc7, 0x3f,
	0x19, 0x1b, 0x7b, 0x6f, 0xd3, 0x5f, 0x7f, 0x55, 0x5d, 0x55, 0xfd, 0x55, 0xf5, 0x40, 0xcd, 0x8b,
	0x59, 0x3f, 0x4e, 0x22, 0x11, 0x91, 0xf6, 0xc8, 0x4f, 0x04, 0xf3, 0x6f, 0xa9, 0x08, 0x3c, 0xe1,
	0x8f, 0x69, 0x62, 0xbf, 0x80, 0xd2, 0xe5, 0xdd, 0x79, 0x2a, 0xc8, 0x03, 0x28, 0x4d, 0xbd, 0x49,
	0x4a, 0x3b, 0x46, 0xd7, 0xe8, 0x99, 0x8e, 0x5a, 0x90, 0x7d, 0x28, 0x73, 0x3f, 0x61, 0xb1, 0xe8,
	0x14, 0xba, 0x46, 0xaf, 0xe1, 0xe8, 0x95, 0xfd, 0x16, 0xaa, 0xe7, 0xa9, 0xb8, 0x88, 0x58, 0x28,
	0xc8, 0x07, 0x50, 0x8b, 0x13, 0x3a, 0x75, 0xc7, 0x1e, 0x1f, 0xa3, 0x75, 0xc3, 0xa9, 0x4a, 0xe0,
	0xa5, 0xc7, 0xc7, 0xe4, 0x11, 0x00, 0x6e, 0xb2, 0x70, 0x44, 0xef, 0xd0, 0x49, 0xc9, 0x41, 0xfa,
	0x99, 0x04, 0x08, 0x01, 0x53, 0x24, 0x94, 0x76, 0x8a, 0xb8, 0x81, 0xdf, 0xf6, 0x21, 0x1c, 0x5c,
	0xc9, 0xe8, 0xae, 0x3c, 0x26, 0x58, 0x78, 0xf3, 0x1d, 0xe3, 0xc2, 0xa1, 0xef, 0x52, 0xca, 0x85,
	0xfd, 0x87, 0x01, 0x9d, 0xfc, 0x1e, 0x8f, 0xa3, 0x90, 0x53, 0xf2, 0x12, 0xca, 0xef, 0x52, 0x9a,
	0x52, 0xde, 0x31, 0xba, 0xc5, 0x5e, 0x7d, 0xf0, 0xac, 0x7f, 0x3f, 0xdb, 0xfe, 0x3a, 0xdb, 0xfe,
	0x6b, 0x69, 0xe8, 0x68, 0x7b, 0xeb, 0x05, 0x94, 0x10, 0x90, 0xe1, 0x85, 0x5e, 0xa0, 0x6a, 0x52,
	0x73, 0xf0, 0x9b, 0x74, 0xa0, 0xe2, 0x05, 0x51, 0x1a, 0x0a, 0xde, 0x29, 0x74, 0x8b, 0x3d, 0xd3,
	0xc9, 0x96, 0xf6, 0x2f, 0x40, 0x4e, 0x59, 0x38, 0xfa, 0x1e, 0x0f, 0xe3, 0x3a, 0x66, 0xf2, 0x14,
	0xda, 0x58, 0x7c, 0x3f, 0x9a, 0xb8, 0x53, 0x9a, 0x70, 0x16, 0x85, 0xe8, 0xaf, 0xe9, 0xec, 0x64,
	0xf8, 0x1b, 0x05, 0xcb, 0x6a, 0x2b, 0x5f, 0x58, 0x28, 0xd3, 0xd1, 0x2b, 0x72, 0x04, 0x0d, 0x4e,
	0xb9, 0xa4, 0xb8, 0x18, 0x4e, 0x11, 0xc3, 0xa9, 0x6b, 0xec, 0x95, 0x17, 0x50, 0xfb, 0x2f, 0x03,
	0xf6, 0x96, 0x0e, 0xd7, 0x45, 0x79, 0x04, 0x90, 0x99, 0xb2, 0x91, 0x3e, 0xb7, 0xa6, 0x91, 0xb3,
	0xd1, 0xda, 0x13, 0xdb, 0x50, 0xfc, 0x59, 0x5f, 0x8b, 0xe9, 0xc8, 0x4f, 0x72, 0x08, 0xd5, 0x38,
	0x8a, 0x26, 0xae, 0x84, 0x4d, 0x84, 0x2b, 0x72, 0x7d, 0x4a, 0x29, 0x39, 0x81, 0x56, 0xe0, 0xb1,
	0xd0, 0x1f, 0x7b, 0x2c, 0x54, 0x2a, 0x28, 0xa1, 0x0a, 0x9a, 0x33, 0x14, 0xa5, 0x70, 0x04, 0x0d,
	0x75, 0x1b, 0x6e, 0x9c, 0x30, 0x9f, 0x76, 0xca, 0xe8, 0xa5, 0xae, 0xb0, 0x0b, 0x09, 0xd9, 0xff,
	0x16, 0xe0, 0xe1, 0x37, 0x34, 0xa4, 0x89, 0x27, 0xe8, 0x25, 0xe2, 0x59, 0x15, 0x37, 0xe4, 0x71,
	0x04, 0x8d, 0x69, 0x24, 0xa8, 0xeb, 0x8d, 0x46, 0x09, 0xe5, 0x1c, 0xb3, 0xa9, 0x39, 0x75, 0x89,
	0x7d, 0xa9, 0x20, 0x49, 0xc1, 0x04, 0x32, 0x8a, 0x2e, 0xa2, 0xc4, 0x32, 0xca, 0x27, 0x40, 0xfc,
	0x28, 0x08, 0x98, 0x08, 0x68, 0x28, 0x66, 0x44, 0x13, 0x89, 0xbb, 0xf3, 0x9d, 0x8c, 0xde, 0x83,
	0x36, 0x8f, 0x27, 0x4c, 0xb8, 0xe2, 0x6e, 0x46, 0x2e, 0x21, 0xb9, 0x85, 0xf8, 0xe5, 0x5d, 0xc6,
	0xfc, 0x02, 0x76, 0x66, 0x4c, 0x7f, 0xec, 0x85, 0x37, 0x2a, 0xfb, 0xfa, 0xe0, 0x20, 0xaf, 0x51,
	0x6c, 0x47, 0xa7, 0xa9, 0x3d, 0x7c, 0x8d, 0x6c, 0xf2, 0xd5, 0x82, 0x03, 0x16, 0xc6, 0xa9, 0xe0,
	0x9d, 0x0a, 0x8a, 0xdc, 0xca, 0x3b, 0xc8, 0x1a, 0x73, 0xe6, 0xe3, 0x0c, 0x0d, 0xc8, 0x63, 0x68,
	0x72, 0xea, 0x27, 0x54, 0x84, 0xd7, 0xea, 0x96, 0xaa, 0x78, 0x4b, 0x8d, 0x0c, 0x94, 0x97, 0x64,
	0xff, 0x53, 0x80, 0xfd, 0xfb, 0x37, 0xa0, 0xa5, 0x74, 0x08, 0xd5, 0x2c, 0x06, 0xdd, 0xe6, 0x15,
	0x7d, 0x00, 0x79, 0x02, 0x3b, 0xfa, 0x6a, 0x05, 0x0d, 0xe2, 0x89, 0x27, 0xa8, 0x9e, 0x17, 0x2d,
	0x05, 0x5f, 0x6a, 0x94, 0xfc, 0x08, 0x8d, 0xd8, 0x93, 0xf1, 0xb2, 0xd8, 0x93, 0x1d, 0x54, 0xc4,
	0x24, 0x9e, 0xe7, 0x93, 0x58, 0x1d, 0x43, 0xff, 0x62, 0x6e, 0xec, 0x2c, 0x79, 0x92, 0xf3, 0x4b,
	0xcd, 0x18, 0x13, 0xb5, 0xa1, 0x16, 0xd6, 0xef, 0x06, 0xd4, 0x17, 0x6c, 0x16, 0xf4, 0x6e, 0x2c,
	0xe9, 0x3d, 0x57, 0x9b, 0x42, 0xbe, 0x36, 0xe4, 0x18, 0x5a, 0x28, 0xb2, 0xf8, 0xd6, 0xd5, 0x43,
	0xb1, 0xa8, 0x58, 0x12, 0xbd, 0xb8, 0x1d, 0x22, 0x26, 0x59, 0xa8, 0xb3, 0x39, 0xcb, 0x54, 0x2c,
	0x89, 0x66, 0x2c, 0xfb, 0xb7, 0x02, 0xec, 0x9e, 0xa6, 0xe1, 0xe8, 0xbd, 0x54, 0xfe, 0x03, 0x54,
	0x54, 0x95, 0xd4, 0xe8, 0xa9, 0x0f, 0x3e, 0xcb, 0x17, 0x2e, 0xe7, 0x14, 0x11, 0x3a, 0x5a, 0xa8,
	0x82, 0xde, 0xce, 0x7c, 0x91, 0x01, 0x3c, 0x4c, 0xe8, 0x34, 0xf2, 0x3d, 0x21, 0x0f, 0x56, 0x41,
	0xbb, 0x9c, 0xdd, 0xe8, 0xf4, 0xf6, 0xe6, 0x9b, 0x2a, 0xf8, 0x21, 0xbb, 0xb1, 0xce, 0xe1, 0x60,
	0x8d, 0x5f, 0xf2, 0x1c, 0xf6, 0xb5, 0x18, 0x50, 0xa9, 0xda, 0xa1, 0xf4, 0xa7, 0x54, 0xf3, 0x40,
	0xed, 0xa2, 0x2a, 0x87, 0xd9, 0x9e, 0xfd, 0xa7, 0x01, 0x64, 0x31, 0x76, 0x2d, 0xba, 0x37, 0xf3,
	0x94, 0xd5, 0x54, 0xff, 0xfc, 0xff, 0x53, 0xd6, 0x3a, 0xd9, 0x94, 0xb3, 0xf5, 0x7a, 0x7d, 0xfc,
	0xfb, 0x50, 0x56, 0x2c, 0x1d, 0xaf, 0x5e, 0x91, 0x0f, 0x01, 0xe6, 0x95, 0xd0, 0x02, 0x59, 0x40,
	0xec, 0x5f, 0x55, 0x02, 0x43, 0xd5, 0x13, 0x5b, 0x5e, 0x69, 0x1f, 0xf6, 0x66, 0x8d, 0x3d, 0x2b,
	0x94, 0xba, 0xde, 0x86, 0xb3, 0xab, 0xfb, 0x6b, 0x56, 0x25, 0x4e, 0x2c, 0xa8, 0x66, 0x9a, 0xd4,
	0xd3, 0x79, 0xb6, 0xb6, 0xaf, 0x60, 0x6f, 0x29, 0x80, 0xcd, 0x7d, 0x7b, 0x02, 0x2d, 0x65, 0xed,
	0x86, 0x69, 0x70, 0x4d, 0x93, 0xec, 0x49, 0xd3, 0xcd, 0xf0, 0x4a, 0x81, 0xf6, 0x0e, 0x34, 0x87,
	0xc2, 0x13, 0x69, 0xf6, 0xa6, 0xd9, 0x3f, 0x41, 0x2b, 0x03, 0xf4, 0x21, 0xf7, 0x87, 0xbb, 0x91,
	0x1b, 0xee, 0x2b, 0x1f, 0xc2, 0xc2, 0xca, 0x87, 0x70, 0xf0, 0xb7, 0x09, 0x87, 0x2a, 0x0d, 0xb4,
	0x57, 0x8f, 0x5a, 0x32, 0xa4, 0xc9, 0x54, 0x3a, 0xba, 0x85, 0xf6, 0xfd, 0x87, 0x9c, 0x3c, 0xdd,
	0xe6, 0xb1, 0xc7, 0xe0, 0xad, 0x8f, 0xb7, 0xff, 0x2f, 0x78, 0x66, 0x90, 0xb7, 0x50, 0x5f, 0x78,
	0x57, 0xc9, 0xf1, 0x0a, 0xf9, 0xe5, 0xde, 0x7c, 0xeb, 0x64, 0x03, 0x4b, 0x17, 0xcd, 0x87, 0xd6,
	0xf2, 0x9c, 0x23, 0x4f, 0x36, 0x4f, 0x42, 0x75, 0x42, 0x6f, 0xdb, 0x91, 0x49, 0xae, 0x00, 0xe6,
	0x0d, 0x42, 0x1e, 0x6f, 0x31, 0x31, 0xac, 0xe3, 0x6d, 0x7a, 0x0c, 0x2b, 0x33, 0x97, 0x1b, 0x59,
	0x63, 0xb4, 0xdc, 0x0e, 0x2b, 0x2b, 0xb3, 0x42, 0xb3, 0xdf, 0x42, 0x59, 0x09, 0x8c, 0x7c, 0x94,
	0x37, 0x58, 0xd2, 0xa2, 0xd5, 0x5d, 0x4f, 0x50, 0xce, 0xae, 0xcb, 0x28, 0xaf, 0x4f, 0xff, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0xa9, 0x2b, 0x14, 0xbc, 0x09, 0x0b, 0x00, 0x00,
}
